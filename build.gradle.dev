plugins {
	id 'fabric-loom' version "${fabric_loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "${project.archives_base_name}-${project.minecraft_version}-Fabric"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'Forge'
		url = 'https://maven.minecraftforge.net/'
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'Neoforge'
		url = 'https://maven.neoforged.net/releases'
	}
	maven {
		name = 'CurseMaven'
		url = 'https://cursemaven.com'
	}

	// ModMenu
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_mc_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "curse.maven:lazydfu-433518:3821870" //Lazy DFU for 1.19+

	// Forge deps. For dependency libraries required at compile, you'll have to add an implementation for them as well.
	compileOnly "net.minecraftforge:forge:${project.forge_version}:universal"
	compileOnly "net.minecraftforge:javafmllanguage:${project.forge_version}"
	compileOnly "net.minecraftforge:fmlcore:${project.forge_version}"
	compileOnly "net.minecraftforge:fmlloader:${project.forge_version}"
	compileOnly "net.minecraftforge:eventbus:${project.forge_event_bus_version}"
	compileOnly "net.minecraftforge:mergetool-api:${project.forge_merge_tool_api_version}"

	// NeoForge deps
	compileOnly ("net.neoforged:neoforge:${project.neoforge_version}:universal"){
		exclude group: "cpw.mods", module: "modlauncher"
	}

	// Common Forge deps
	compileOnly "com.electronwill.night-config:core:${project.nightconfig_core_version}"

	// Mod deps
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation "me.ichun:ichunutil:${project.ichunutil_version}:${project.minecraft_version}-fabric"
}

//If there's mixins
//loom {
//	mixin {
//		defaultRefmapName = "${project.mod_id}.refmap.json"
//	}
//}

tasks.named('processResources', ProcessResources).configure {
	exclude("META-INF/mods-forge.toml")
	exclude("META-INF/accesstransformer-forge.cfg")
	exclude("META-INF/neoforge.mods.toml")
	exclude("META-INF/accesstransformer-neoforge.cfg")

    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range, 
            minecraft_resource_pack_format: minecraft_resource_pack_format, minecraft_data_pack_format: minecraft_data_pack_format,
            forge_version         : forge_version, forge_version_range: forge_version_range, forge_loader_version_range: forge_loader_version_range,
            neoforge_version         : neoforge_version, neoforge_version_range: neoforge_version_range, neoforge_loader_version_range: neoforge_loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version, mod_description : mod_description, 
            mod_url_home: mod_url_home, mod_url_sources: mod_url_sources, mod_url_issues: mod_url_issues, mod_url_discord: mod_url_discord,
            ichunutil_version: ichunutil_version, ichunutil_version_range: ichunutil_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
