plugins {
	id 'fabric-loom' version "${fabric_loom_version}"
	id 'maven-publish'
	id "com.hypherionmc.modutils.modpublisher" version "${modpublisher_version}"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "${project.archives_base_name}-${project.minecraft_version}-Fabric"
}

repositories {
    mavenLocal()
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}

	// ModMenu
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_mc_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
	// Mod deps
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation "me.ichun:ichunutil:${project.ichunutil_version}:${project.minecraft_version}-fabric"
}

//If there's mixins
loom {
//	accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
	mixin {
		defaultRefmapName = "${project.mod_id}.refmap.json"
	}
}

sourceSets {
	main {
		java {
			exclude "me/ichun/mods/${project.mod_id}/api/forge/**"
			exclude "me/ichun/mods/${project.mod_id}/loader/forge/**"
			exclude "me/ichun/mods/${project.mod_id}/api/neoforge/**"
			exclude "me/ichun/mods/${project.mod_id}/loader/neoforge/**"
		}
	}
}

tasks.named('processResources', ProcessResources).configure {
	exclude("META-INF/mods-forge.toml")
	exclude("META-INF/accesstransformer-forge.cfg")
	exclude("META-INF/neoforge.mods.toml")
	exclude("META-INF/accesstransformer-neoforge.cfg")

    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range, 
            minecraft_resource_pack_format: minecraft_resource_pack_format, minecraft_data_pack_format: minecraft_data_pack_format,
            forge_version         : forge_version, forge_version_range: forge_version_range, forge_loader_version_range: forge_loader_version_range,
            neoforge_version         : neoforge_version, neoforge_version_range: neoforge_version_range, neoforge_loader_version_range: neoforge_loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version, mod_description : mod_description, 
            mod_url_home: mod_url_home, mod_url_sources: mod_url_sources, mod_url_issues: mod_url_issues, mod_url_discord: mod_url_discord,
            ichunutil_version: ichunutil_version, ichunutil_version_range: ichunutil_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	//withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "${mod_id}"
            version  "${mod_version}"
            artifact(remapJar)
            {
                classifier "${project.minecraft_version}-fabric"
            }
            //from components.java
        }
    }
    
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

apply from: 'gradle/modpublisher.gradle'

publisher {
    // Curseforge Project ID
    setCurseID("${curseforge_project_id_fabric}")

    // The file to be uploaded. This can be a file, task, or string.
    // setArtifact("build/libs/mymod.jar")
    // setArtifact(jar.getArchiveFile().get())
    // If this is a task, the task specified will be executed before publishing
    setArtifact(remapJar)

    // Fancy display name for the upload.
    // Will default to the project version if not set
    setDisplayName("[${minecraft_version} Fabric] v ${mod_version}")    
    
    // The modloaders your upload supports.
    // This can also be an Enum from ModLoader,
    // like setLoaders(ModLoader.FABRIC, ModLoader.FORGE)
    setLoaders("fabric")
    
    // Additional files to upload. Same as artifact, this can be a task, file or string
    //addAdditionalFile(apiJar)

    // Modrinth Dependencies.
    // Accepts a slug or id
    modrinthDepends {
        required "P7dR8mSH", "W6ROj0Hl" //Fabric API and iChunUtil
    }

    // Curse Dependencies
    curseDepends {
        required "fabric-api", "ichunutil" //Fabric API and iChunUtil
    }
}